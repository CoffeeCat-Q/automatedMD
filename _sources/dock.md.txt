# Dock User Guide

Dock 模块是通过串联分子对接软件 python API 来实现各类分子设计与评估功能、筛选等工作流的自动化模块。  
目前, Dock 仅针对 Schrodinger Suites 进行开发，并计划在未来添加更多主流分子对接软件的支持。

**注意**  
* 由于Schrodinger Suite使用了闭源环境提供Python API调用, 使用 `Dock` 模块相关功能(包括CLI命令)脚本时, 应该保证您正处于由 Schrodinger 建立的虚拟环境中，并在该环境中安装 `pyCADD`。 
* 使用 
```
$SCHRODINGER/run schrodinger_virtualenv.py schrodinger.ve
source schrodinger.ve/bin/activate
python3 -m pip install pycadd -U
```
命令可在当前目录下创建名为`schrodinger.ve`的虚拟环境，激活并在其中安装 `pyCADD`。 更多信息请参阅 [如何建立Schrodinger Python Virtual Env](https://content.schrodinger.com/Docs/r2022-1/python_api/intro.html#per-user-virtual-environments-for-installing-additional-modules)。

### Docking of Many-to-One

`pyCADD` UI 的 `Dock Mode` 提供了将一个或多个配体对接于单个受体结构的功能。
运行 `pyCADD` 选择模式1 并使用功能6，提供包含一个多个配体的单一 `.mae` 或 `.maegz` 的文件路径即可

### Docking of One-to-Many & Many-to-many

`pyCADD` 的 `pycadd-dock ensemble-dock` 提供了高性能多核并行系综对接(Ensemble Docking)计算及数据处理接口。  

请确保当前工作目录 (Current Working Directory) 在您想要保存项目文件的目录中, 并在目录中额外准备：

* 一个分行列出的, 受体蛋白所属 PDB ID的列表文本文件 **.txt* 或 **.csv*
* 一个需要对接的配体 **3D结构文件** **.pdb*  **.mae* 或其他Schrodinger支持的格式

以下是一个输入文件的示例 *example.txt*：  
！如果晶体包含有多个不同名称的小分子配体, 请在文件中指明 (以逗号分隔) 以定义对接格点的中心
```
3OAP,9CR
5JI0,BRL
4K6I,9RA
```
以及一个准备就绪的用于对接的化合物库文件(其中含有若干个结构) *library_file.mae*

然后 您可以通过命令
```bash
pycadd-dock ensemble-dock example.txt library_file.mae
```
启动 Ensemble Docking。Dock 模块将会下载每一个受体PDB结构，完成晶体准备过程并将*library_file.mae*中的每一个化合物交叉对接到每一个受体中。  
对接结束后，M个受体与N个配体的 Ensemble Docking 将会得到 *M x N* 的分数矩阵，单次对接不成功时分数将会留空。  
更多支持的输入文件格式请参阅 [为系综对接构建Dock输入文件的示例](#为系综对接构建Dock输入文件的示例)

使用 
```bash
pycadd-dock ensemble-dock --help
```
以获取更多帮助信息。

**注意**

* 脚本将自动识别文本文件中每一行的PDB ID并自行批量下载  
* 应用程序默认使用系统最大核心数量的 75% 进行集合式对接工作 通过设置 `-n/--parallel <NUM>` 参数来指定使用的核心数量
* 如您需要执行晶体共结晶配体的回顾性对接(Self-Docking), 请添加参数 `--redock`
* 所有集合式对接工作完成后, 将自动提取重要的对接结果数据, 并保存在 `result` 目录下的 `_DOCK_FINAL_RESULTS.csv`字样的文件中, 且将产生汇总矩阵文件`matrix.csv`，该文件可直接用于`Dance`模块中。

## 为系综对接构建Dock输入文件的示例

`pycadd-dock ensemble-dock` 支持三种输入文件格式：
* csv
* ini | in
* yaml | yml


### Note
* 通过 `csv` 构建Dock输入文件，可以满足 `pycadd-dock ensemble-dock` 的需要，但由于其不含有受体通用名称 (如RXRα) , 在调用 `pycadd-dock quick-report` 时，可能会报错，请改用另外两种格式。
* 通过 `ini` 构建Dock输入文件时，由于ini文件类型的特性，同一PDB ID不能出现在同一受体下中两次或以上。因此, 如果晶体含有多个共结晶配体，且需要分别计算，请将所有共结晶配体名称赋值于同一PDB ID下，并以英文逗号分隔。
* 通过 `yaml` 构建Dock输入文件是推荐格式，可以满足所有情况下的需求，但需要注意：
    * 由于yaml语法要求，英文 `":"` 后需要有一空格
    * yaml语法要求同一Section中的内容 应该具有相同的缩进，类似于python
    * yaml可以为同一晶体指定多个共结晶配体, 通过多行分割，并在每一行以 `"-"` 分割
    * 当共结晶配体名称仅由数字组成时，使用引号将其包裹(e.g '056')

以下是三种格式的示例：  

*csv*
```
1XJ7,DHT
1XQ3,R18
2AM9,TES
2AM9,DTT
2YLP,TES
2YLP,056
```

*ini | in*
```
[P10275]
    1XJ7: DHT
    1XQ3: R18
    2AM9: TES,DTT
    2YLP: TES,056
```

*yaml | yml*
```
P10275:
    1XJ7: DHT
    1XQ3: 
    - R18
    2AM9: 
    - TES
    - DTT
    2YLP:
    - TES
    - '056'
```